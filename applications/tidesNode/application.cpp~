//#include "/Users/mauricio/Documents/development/git/sparkio/tidesNode/SparkCore-NeoPixel-master/firmware/neopixel.h"

SYSTEM_MODE(MANUAL);

#define HEARTBEAT_INTERVAL (5000)
#define LISTEN_PORT (23)
byte serverIP[] = { 10, 0, 1, 8 };
#define SERVER_PORT (8100)
//byte serverIP[] = { 74, 125, 224, 72 };
//#define SERVER_PORT (80)
TCPServer server = TCPServer(LISTEN_PORT);
TCPClient client;
int led2 = D7; // This one is the built-in tiny one to the right of the USB jack

// Node Statemachine
typedef enum State {STARTUP, REGISTERING, OPERATION, DROPPED, CLOUD} State;
unsigned long stateTime = millis();
unsigned long lastHeartbeat = 0;
State currentState = STARTUP;

void setup()
{
	WiFi.connect();
	Serial.begin(9600);
	while(!Serial.available()) SPARK_WLAN_Loop();

	Serial.println(WiFi.localIP());
	Serial.println(WiFi.subnetMask());
	Serial.println(WiFi.gatewayIP());
	Serial.println(WiFi.SSID());

	pinMode(led2, OUTPUT);
}

void printController() {
	for (int i = 0; i < 4; i++) {
		Serial.print(serverIP[i]);
		if (i < 3) Serial.print(".");
	}
	Serial.print(":");
	Serial.println(SERVER_PORT);
}

// Register the node with the controller
void registerSelf() 
{
	if (client.connect(serverIP, SERVER_PORT)) {
		Serial.print("Connected: ");
		printController();
		client.print("GET /register?");
		client.print("id="); client.print("xyz"); client.print("&");
		client.print("address="); client.print("10.0.1.37"); client.print("&");
		client.print("port="); client.print(LISTEN_PORT);
		client.println(" HTTP/1.0");
		client.println("Host: www.google.com");
		client.println("Content-Length: 0");
		client.println();
		server.begin();
		currentState = REGISTERING;
		stateTime = millis();
	} else {
		Serial.print("Could not connect: ");
		printController();
	}
}

// Wait for the controller to recognize our registration request
void awaitRecognition() {
	if (client) {
		if (client.connected()) {
			while (client.available()) {
				char c = client.read();
				if (c == 'X') {
					Serial.println("Recognized");
					currentState = OPERATION;
					stateTime = millis();
				}
			}
		}
	} else client = server.available();
}

// Listen for cloud updates
void handleCloud() {
	if (Spark.connected() == false) {
		Serial.println("Connecting to cloud");
		Spark.connect();
	}
	Spark.process();
}

// Normal operation
void handleCommands() {
	while (client.available()) {
		char c = client.read();
		if (c == '1') {
			Serial.println("Moving to cloud");
			currentState = CLOUD;
		} else if (c == '2') {
			Serial.println("Heartbeat request");
			lastHeartbeat = 0;
		}
	}
	if (millis() - lastHeartbeat > HEARTBEAT_INTERVAL) {
		Serial.println("Heartbeat sent");
		lastHeartbeat = millis();
		client.write('h');
	}
}

// Normal LED control loop
void animationLoop() {

}

void loop()
{
	if (currentState == STARTUP) {
		registerSelf();
	} else if (currentState == REGISTERING) {
		awaitRecognition();
	} else if (currentState == OPERATION) {
		handleCommands();
		animationLoop();
	} else if (currentState == CLOUD) {
		handleCloud();
		handleCommands();
		animationLoop();
	}
}

// Protocol
// Node->Controller:
//    h: Heartbeat
//
// Controller->Node:
//    1: Enter cloud mode
//    2: Request heartbeat (e.g. ping)
//    X: Enter normal operation mode
//
// Pinout Diagram: https://docs.google.com/a/bustos.org/drawings/d/12OdPwacGCoI-6NfFAYS2rjWgYxKWuHG0zupCH1tGLEQ/edit?hl=en&forcehl=1
// spark compile tidesNode.ino 
// #Press mode then rst and release when yellow
// sudo dfu-util -l
// spark flash --usb firmware_*.bin 
// spark setup # WPA2
